# -*- coding: utf-8 -*-
"""MAIN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xyC3u3Jsnnb4psFwwX0-3sEFHU51CqJS
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN
import joblib
from scipy.stats import mstats
from lightgbm import LGBMRegressor

def import_models():
    '''
    Function that imports all models and scalers needed
    Input: none
    Ouput: scaler_cluster, cluster_model, scaler_forecast, forecast_model
    '''
    scaler_cluster  = joblib.load('/content/drive/MyDrive/Globant/Models/scaler_cluster.pkl')
    cluster_model  = joblib.load('/content/drive/MyDrive/Globant/Models/cluster.pkl')
    scaler_forecast  = joblib.load('/content/drive/MyDrive/Globant/Models/scaler_forecast.pkl')
    forecast_model = joblib.load('/content/drive/MyDrive/Globant/Models/forecast.pkl')
    return scaler_cluster, cluster_model, scaler_forecast, forecast_model

def data_cleaning(df):
    '''
    Function that takes the original dataframe and modifies it
    Input: raw dataframe
    Output: DataFrame with only the necessary columns to run the cluster and forecasting predictions
    '''
    df.columns = df.columns.str.upper().str.replace('DIRECTORATES','DIRECTORATE')
    df = df[~df['TRANS DATE'].isna()]
    df = df[~df['MERCHANT NAME'].isna()]
    df = df[~df['CARD NUMBER'].isna()]
    top_categories = ['Equip Operational', 'Birmingham City Council', 'Vehicle Fuel',
       'Purchases Food', "Mat'l Raw/Drct", 'Supplies & Sev Mic',
       'Transport Misc', 'Conference Fees Subs UK', 'Books', 'Computing Other',
       'Equip Other', 'Electricity', 'Vehicle Excise Lics',
       'Bldg RM Departmental', 'Phon NonCentrx Lines', 'Stationery', 'Postage',
       'Hospitality', 'Water Services', 'Training Other',
       'Vehicle OthrunCosts', 'Prof Fees other', 'Other Fix&Fittings',
       'Travel Taxis', 'Oth Indirect EmpExps', 'Subscriptions',
       'In Year Credits', 'Other Services', 'Travel Bus/Rail',
       'Clothing&Uniforms']
    df['TRANS CAC DESC 1'] = np.where(df['TRANS CAC DESC 1'].isin(top_categories), df['TRANS CAC DESC 1'], 'other')
    df['TRANS TAX DESC'] = np.where(df['TRANS TAX DESC'].isin(['0 Percent','6.1 Percent','12.5%']),'Percentage', df['TRANS TAX DESC'])
    df['TRANS TAX DESC'] = df['TRANS TAX DESC'].fillna('OTHER')
    df['DIRECTORATE'] = df['DIRECTORATE'].str.upper().str.replace('&', 'AND').str.replace('SERVICES ', 'SERVICES').str.replace('GOVENANCE', 'GOVERNANCE').str.replace('GROWTH ', 'GROWTH')
    df[['ORIGINAL GROSS AMT', 'TRANS TAX AMT']] = df[['BILLING GROSS AMT', 'TRANS TAX AMT']].fillna(0)
    df['ORIGINAL GROSS AMT 1'] = mstats.winsorize(df['ORIGINAL GROSS AMT'], limits=[0.01,0.01])
    df['TRANS TAX AMT 1'] = mstats.winsorize(df['TRANS TAX AMT'], limits=[0.01,0.01])
    clean_data = df[['TRANS DATE', 'TRANS TAX DESC', 'ORIGINAL CUR', 'DIRECTORATE',
    'TRANS CAC DESC 1',  'ORIGINAL GROSS AMT 1', 'TRANS TAX AMT 1',
    'ORIGINAL GROSS AMT', 'TRANS TAX AMT', 'CARD NUMBER', 'MCC CODE']]
    return clean data

def cluster(df_clean, scaler_cluster, cluster_model):
    '''
    Function that indicates the cluster of each observation from the dataframe
    Input: Post processed dataframe. Cluster Standard Scaler. Cluster file.
    Output: DataFrame with Additional column indicating segment
    '''
    df = df_clean.copy()
    df['count'] = 1
    df_clusters = df.groupby('CARD NUMBER').agg(Count_Transactions=('count',np.sum), Sum_Value_Transactions=('ORIGINAL GROSS AMT 1',np.sum),avg_Value_Transactions=('ORIGINAL GROSS AMT 1',np.mean),
                                Count_Unique_Categories=('TRANS CAC DESC 1',pd.Series.nunique))
    df_dummy = pd.get_dummies(df[['CARD NUMBER','TRANS CAC DESC 1']],columns=dummy,drop_first=True)
    df_dummy = df_dummy.groupby('CARD NUMBER').sum().reset_index()
    df_clusters_interm = pd.merge(df_dummy, df_clusters, on='CARD NUMBER')
    columns_n = ['TRANS CAC DESC 1_Bldg RM Departmental',
       'TRANS CAC DESC 1_Books', 'TRANS CAC DESC 1_Clothing&Uniforms',
       'TRANS CAC DESC 1_Computing Other',
       'TRANS CAC DESC 1_Conference Fees Subs UK',
       'TRANS CAC DESC 1_Electricity', 'TRANS CAC DESC 1_Equip Operational',
       'TRANS CAC DESC 1_Equip Other', 'TRANS CAC DESC 1_Hospitality',
       'TRANS CAC DESC 1_In Year Credits', "TRANS CAC DESC 1_Mat'l Raw/Drct",
       'TRANS CAC DESC 1_Oth Indirect EmpExps',
       'TRANS CAC DESC 1_Other Fix&Fittings',
       'TRANS CAC DESC 1_Other Services',
       'TRANS CAC DESC 1_Phon NonCentrx Lines', 'TRANS CAC DESC 1_Postage',
       'TRANS CAC DESC 1_Prof Fees other', 'TRANS CAC DESC 1_Purchases Food',
       'TRANS CAC DESC 1_Stationery', 'TRANS CAC DESC 1_Subscriptions',
       'TRANS CAC DESC 1_Supplies & Sev Mic',
       'TRANS CAC DESC 1_Training Other', 'TRANS CAC DESC 1_Transport Misc',
       'TRANS CAC DESC 1_Travel Bus/Rail', 'TRANS CAC DESC 1_Travel Taxis',
       'TRANS CAC DESC 1_Vehicle Excise Lics', 'TRANS CAC DESC 1_Vehicle Fuel',
       'TRANS CAC DESC 1_Vehicle OthrunCosts',
       'TRANS CAC DESC 1_Water Services', 'TRANS CAC DESC 1_other',
       'Count_Transactions', 'Sum_Value_Transactions',
       'avg_Value_Transactions', 'Count_Unique_Categories']
    df_clusters_interm[columns_n] = scaler_cluster.transform(df_clusters_interm[columns_n])
    cluster_model.fit(df_clusters_interm[columns_n])
    df_clusters_interm['DBSCAN_labels']=dbscan.labels_
    final_clusters = pd.merge(df_clean,df_clusters_interm[['CARD NUMBER', 'DBSCAN_labels']], on = 'CARD NUMBER', how = 'inner')
    return final_clusters

    def forecast(df_clean, scaler_forecast, forecast_model):
    '''
    Function that predicts the total expendature of the School directature category
    Input: Post processed dataframe. Forecast Standard Scaler. Forecas model.
    Output: DataFrame with forecast for school expendature
    '''
    df = df_clean.copy()
    df = df[df['DIRECTORATE'] == 'SCHOOLS']
    df['TRANS DATE'] = pd.to_datetime(df['TRANS DATE'], dayfirst = False)
    df['dayofweek'] = df['TRANS DATE'].dt.dayofweek
    df['quarter'] = df['TRANS DATE'].dt.quarter
    df['month'] = df['TRANS DATE'].dt.month
    df['year'] = df['TRANS DATE'].dt.year
    df['dayofyear'] = df['TRANS DATE'].dt.dayofyear
    df['dayofmonth'] = df['TRANS DATE'].dt.day
    df['weekofyear'] = df['TRANS DATE'].dt.isocalendar().week
    x = ['dayofweek', 'quarter', 'month', 'year','dayofyear', 'dayofmonth', 'weekofyear']
    df[x] = stnd_scl.transform(df[x])
    df['PREDICTION'] = lgbm_model.predict(df[x])
    df_final = df[['TRANS DATE','CARD NUMBER','DIRECTORATE', 'PREDICTION']]
    return df_final

def main(df_input):
    '''
    Function That receives the data and returns clusters segments and forecast predictions
    Input: Initial Dataset
    Output: Dataframe with cluster, Dataframe with Forecast
    '''
    scaler_cluster, cluster_model, scaler_forecast, forecast_model = import_models()
    df1 = data_cleaning(df_input)
    df_cluster = cluster(df1, scaler_cluster, cluster_model)
    df_forecast = forecast(df1, scaler_forecast, forecast_model)
    return df_cluster, df_forecast